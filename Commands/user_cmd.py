
from aiogram.types import Message, InlineKeyboardMarkup, CallbackQuery, InlineKeyboardButton
from Commands import parser_profile_photo_and_name as pars
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart, Command
from aiogram import types, Router, F, Bot
from aiogram import exceptions
from dotenv import load_dotenv
from database import bd as db
import os


rp = Router()
load_dotenv()
bot = Bot(token = os.getenv("TOKEN_API"))

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
cmd_list = "\n1. /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n2. /Brawl_Stars - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–≤–æ–∏–º Brawl Stars id"
@rp.message(CommandStart())
async def start(message: Message):
    await message.answer(f"üöÄ –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã:{cmd_list}")

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /Brawl_Stars
@rp.message(Command("Brawl_Stars"))
async def key(message: types.Message):
    from battons.battons import communication
    markup = await communication()
    await message.answer("–í–∏–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup = markup)

#–ü–∞—Ä—Å–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
#–°–æ—Å—Ç–æ—è–Ω–∏–µ ‚úÖ
async def pars_profile_photo(message: Message, profile_id, user_id):
    try:
        await pars.pars_profile_photo(profile_id)
        profile_photo = "D:\Project\Tg-Brawl-Bot\profile_photo.jpg"
        await message.answer_photo(photo = types.FSInputFile(path = profile_photo))
        if os.path.exists(profile_photo):
            os.remove(profile_photo)
    except exceptions.TelegramBadRequest:
        await change_brawl_id(message, user_id)

#–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω—è–µ—Ç –≤–∏–±—Ä–∞–Ω–∏–π Btawl Stars ID
#–°–æ—Å—Ç–æ—è–Ω–∏–µ ‚úÖ
async def change_brawl_id(message: Message, user_id):
    await message.answer("–ü–æ—Ö–æ–∂–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏—å–Ω—ã–π Brawl Stars ID.")
    await message.answer("–ù–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑ —Å–≤–æ–π Brawl Stars ID(–±–µ–∑ #):")
    @rp.message(F.text)
    async def profile_bs_id(message: Message):
        brawl_id = str(message.text.upper())
        await db.save_brawl_stars_id_1(user_id, brawl_id)
        await pars_profile_photo(message, brawl_id, user_id)


#–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª—ã —Ç–∞–∫–æ–π user –µ—Å–ª–∏ –¥–∞ —Ç–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω–∏–π Brawl Stars ID
#–°–æ—Å—Ç–æ—è–Ω–∏–µ ‚úÖ
async def send_profile_photo(message: Message, user_id, nume):
    profile_id = str(await db.__getattribute__(f"get_brawl_id_{nume}")(user_id))
    if profile_id == "False" or profile_id == "None":
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π Brawl Stars ID(–±–µ–∑ #):")
        await db.save_user_id(user_id)
        @rp.message(F.text)
        async def profile_bs_id(message: Message):
            brawl_id = str(message.text.upper())
            await db.__getattribute__(f"save_brawl_stars_id_{nume}")(user_id, brawl_id)
            await pars_profile_photo(message, brawl_id, user_id)
            
    else:
        await pars_profile_photo(message, profile_id, user_id)


#–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–±—Ä–∞–Ω–∏–π Brawl Stars ID
async def save_brawl_stars_id(message: Message, user_id, nume):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π Brawl Stars ID(–±–µ–∑ #):")
    @rp.message(F.text)
    async def profile_bs_id(message: Message):
        brawl_id = str(message.text.upper())
        await db.__getattribute__(f"save_brawl_stars_id_{nume}")(user_id, brawl_id)

#-------------------------------------------------------------#
#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /Brawl_Stars     
@rp.callback_query(F.data == "photo")
async def batton(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    from battons.battons import photo
    user_id = call.from_user.id
    await photo(user_id)
    markup = await photo(call.from_user.id)
    await call.message.answer("–í–∏–±–µ—Ä–µ—Ç–µ Brawl Stars ID –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞–º:", reply_markup = markup)

@rp.callback_query(F.data == "change")
async def batton(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    pass

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫–∏ add
@rp.callback_query(F.data == "add_brawl_id_1")
async def batton(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    user_id = call.from_user.id
    nume = 1
    await send_profile_photo(call.message, user_id, nume)
@rp.callback_query(F.data == "brawl_id_1")
async def batton(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    user_id = call.from_user.id
    nume = 1
    await send_profile_photo(call.message, user_id, nume)


@rp.callback_query(F.data == "add_brawl_id_2")
async def batton(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    user_id = call.from_user.id
    nume = 2
    await send_profile_photo(call.message, user_id, nume)
@rp.callback_query(F.data == "brawl_id_2")
async def batton(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    user_id = call.from_user.id
    nume = 2
    await send_profile_photo(call.message, user_id, nume)


@rp.callback_query(F.data == "add_brawl_id_3")
async def batton(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    user_id = call.from_user.id
    nume = 3
    await send_profile_photo(call.message, user_id, nume)
@rp.callback_query(F.data == "brawl_id_3")
async def batton(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    user_id = call.from_user.id
    nume = 3
    await send_profile_photo(call.message, user_id, nume)
