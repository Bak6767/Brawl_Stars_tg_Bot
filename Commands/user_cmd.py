from Commands import parser_profile_photo_and_name as pars
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram import types, Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram import exceptions
from dotenv import load_dotenv
from database import bd as db
import os


rp = Router()
load_dotenv()
bot = Bot(token = os.getenv("TOKEN_API"))

class router_for_command_brawl_stars(StatesGroup):
    brawl_id = State()
    nume = State()
    user_id = State()

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
cmd_list = "\n1. /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n2. /Brawl_Stars - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–≤–æ–∏–º Brawl Stars id"
@rp.message(CommandStart())
async def start(message: Message):
    await message.answer(f"üöÄ –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã:{cmd_list}")

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /Brawl_Stars
@rp.message(Command("Brawl_Stars"))
async def key(message: types.Message):
    from battons.battons import communication
    markup = await communication()
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup = markup)

#–ü–∞—Ä—Å–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
async def pars_profile_photo(message: Message, profile_id, user_id):
    try:
        await pars.pars_profile_photo(profile_id)
        profile_photo = "D:\Project\Tg-Brawl-Bot\profile_photo.webp"
        await message.answer_photo(photo = types.FSInputFile(path = profile_photo))
        if os.path.exists(profile_photo):
            os.remove(profile_photo)
    except exceptions.TelegramBadRequest:
        await change_brawl_id(message, user_id)

#–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω—è–µ—Ç –≤–∏–±—Ä–∞–Ω–æ–π Brawl Stars ID
async def change_brawl_id(message: Message, user_id):
    await message.answer("–ü–æ—Ö–æ–∂–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Brawl Stars ID.")
    await message.answer("–ù–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑ —Å–≤–æ–π Brawl Stars ID(–±–µ–∑ #):")
    @rp.message(F.text)
    async def profile_bs_id(message: Message):
        brawl_id = str(message.text.upper())
        await db.save_brawl_stars_id_1(user_id, brawl_id)
        await pars_profile_photo(message, brawl_id, user_id)

#-------------------------------------------------------------#
#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /Brawl_Stars     
@rp.callback_query(F.data == "photo")
async def batton(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    from battons.battons import brawl_stars_name
    user_id = call.from_user.id
    markup = await brawl_stars_name(user_id)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ Brawl Stars ID –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º:", reply_markup = markup)

@rp.callback_query(F.data == "change")
async def batton(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    pass

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–∫–∏ add
@rp.callback_query(F.data.contains("add_brawl_id_"))
async def batton(call: CallbackQuery, state: FSMContext):
    await state.set_state(router_for_command_brawl_stars.brawl_id)
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    user_id = call.from_user.id
    nume = int(call.data.split("_")[-1])
    await call.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π Brawl Stars ID(–±–µ–∑ #):")
    await db.save_user_id(user_id)
    await state.update_data(nume = nume, user_id = user_id)
@rp.message(router_for_command_brawl_stars.brawl_id)
async def profile_bs_id(message: Message, state: FSMContext):
    await state.update_data(brawl_id = message.text.upper())
    data = await state.get_data()
    nume = data["nume"]
    user_id = data["user_id"]
    brawl_name = await pars.pars_profile_name(data["brawl_id"])
    await db.__getattribute__(f"save_brawl_stars_name_{nume}")(brawl_name, user_id)
    await db.__getattribute__(f"save_brawl_stars_id_{nume}")(user_id, data["brawl_id"])
    await pars_profile_photo(message, data["brawl_id"], user_id)
    await state.clear()

@rp.callback_query(F.data.contains("brawl_id_"))
async def batton(call: CallbackQuery):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    user_id = call.from_user.id
    nume = int(call.data.split("_")[-1])
    brawl_id = str(await getattr(db, f'get_brawl_id_{nume}')(user_id))
    await pars_profile_photo(call.message, brawl_id, user_id)
